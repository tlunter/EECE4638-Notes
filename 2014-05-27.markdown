# Lecture

*   Solving binary integer programs using branch and bound
*   Advanced techniques
*   Solving assignment using branch and bound
*   Hints for solving graph coloring using ILP

# ILP

## Branch

Take components, and add constraint (less then the floor, greater than the ceiling of component)

    (1.5, 2.5) -> over the x -> <= 1 and >= 2
    (1.5, 2.5) -> over the y -> <= 2 and >= 3

How to fathom a node:

1.  Integral
2.  Feasible
3.  Reachable

## Bound

Use Depth First to one side, check if bigger or smaller than other sides LP solution (pre-branch).
If it is, then branch is fathomed

## Advanced Techniques

Check to see if solution is possible per component.

Using binary variable

    3x1 < 2

x1 must = 0, since x1 = 1 breaks the constraint

### Sample

    1. 2x3 - x5 + x7 <= 1
    2. x2 + x4 + x6 <= 1
    3. x1 - 2x3 + 2x6 >= 2
    4. x1 + x2 - x4 <= 0

    1.  x3 = 0
    3.  -x1 + 2x3 - 2x6 <= -2 -> x6 = 1 and x5 = 0
    2.  x6 is 1, so x2 + x4 <= 0, x2 and x4 = 0
    4.  x1 <= 0, so x1 = 0

    x1, ..., x5 = 0, x6 = 1, x7 = 0 or 1

### Add valid constraint

Maximize z = 3x1 + 2x2
Subject to: 2x1 + 3x2 <= 4, x1 and x2 are binary

Notice the first iteration of the branch and bound finds a non-integra solution.
It would take a few iterations for the optimal solution

Notice if we add a constraint x1 + x2 <= 1, no feasible solution is eliminated
Now the LP solver finds the optimal solution in the first iteration

#### How?

These are constraints that don't eliminate any feasible solutions

Consider this constraint:

    6x1 + 2x3 + 5x3 + 2x4 <= 10

thus

    x1 + x2 + x4 <= 2
    x1 + x3 <= 1

# ILP model for graph coloring

    param numNodes;
    param numColors;
    set edgeList dimen 2;

    param edge {i = 0 numNodes - 1, j in 0 numNodes-1} := (if (i, j) is in edgeList or (j, i) in edgeList then 1 else 0);

    # color[i, j]=1, iff node i has color c

    var color { i in 0..numNodes - 1, c in 0..numColors - 1} binary;

    # conflict[i, j] = 1, iff i and j are connected and have the same color

    var conflict { i in 0..numNodes - 1, j in 0..numNodes - 1} binary;

1.  Write an objective function
2.  Make sure that every node is assigned exactly one color
3.  Make sure conflicts are detected correctly
